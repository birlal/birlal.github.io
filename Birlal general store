/* BIRLAL GENERAL STORE - Single-file React app (App.jsx)

This file contains a complete single-file React component that acts as a small e-commerce storefront (frontend-only) suitable for local testing and for deploying to static hosts (Netlify, Vercel, GitHub Pages).

Features included:

Product listing with sample product data

Product search, category filter, and product detail modal

Shopping cart with add/remove/update quantity

Cart persistence using localStorage

Simple checkout flow (mock) with order summary

Admin-ish product data area (client-side only) to demonstrate adding/editing products

Mobile-responsive using Tailwind CSS utility classes

Accessible components (basic keyboard support for modal)


How to use (short):

1. Create a React app (recommended): npx create-react-app birlal-store cd birlal-store


2. Install Tailwind CSS (optional but recommended): Follow Tailwind docs for Create React App or use a CDN for quick demo (instructions below in README section).


3. Replace src/App.js with this file (rename to App.jsx if using JSX extension), and run: npm start



Hosting suggestions:

For a static frontend-only store: Netlify, Vercel, GitHub Pages.

For payments, user accounts, inventory: connect to a backend or use Firebase + Stripe. Instructions are included below.


NOTE: This is a demo frontend. To accept real payments or manage real orders you must add a secure backend and a payment provider (Stripe/PayPal) and follow PCI rules.

----- Begin React component ----- */

import React, { useEffect, useState } from "react";

// Simple product data (replace with API calls to your backend later) const SAMPLE_PRODUCTS = [ { id: "p1", title: "Birlal Rice - 5kg", price: 599.0, category: "Grocery", image: "https://via.placeholder.com/320x240?text=Birlal+Rice", description: "High-quality rice for daily cooking.", stock: 20, }, { id: "p2", title: "Sunflower Oil - 1L", price: 250.0, category: "Grocery", image: "https://via.placeholder.com/320x240?text=Sunflower+Oil", description: "Cold-pressed sunflower oil.", stock: 50, }, { id: "p3", title: "Notebook - A4 (Single)", price: 80.0, category: "Stationery", image: "https://via.placeholder.com/320x240?text=Notebook", description: "Ruled A4 notebook for students.", stock: 100, }, { id: "p4", title: "Birlal Detergent - 1kg", price: 160.0, category: "Household", image: "https://via.placeholder.com/320x240?text=Detergent", description: "Powerful stain removal detergent.", stock: 35, }, ];

function formatPrice(n) { if (typeof Intl !== "undefined" && Intl.NumberFormat) { return new Intl.NumberFormat("en-IN", { style: "currency", currency: "NPR" }).format(n); } return NPR ${n.toFixed(2)}; }

export default function App() { const [products, setProducts] = useState(() => { const saved = localStorage.getItem("birlal_products"); return saved ? JSON.parse(saved) : SAMPLE_PRODUCTS; });

const [query, setQuery] = useState(""); const [category, setCategory] = useState("All"); const [cart, setCart] = useState(() => { const saved = localStorage.getItem("birlal_cart"); return saved ? JSON.parse(saved) : {}; }); const [selectedProduct, setSelectedProduct] = useState(null); const [showCheckout, setShowCheckout] = useState(false); const [orderPlaced, setOrderPlaced] = useState(null);

useEffect(() => { localStorage.setItem("birlal_cart", JSON.stringify(cart)); }, [cart]);

useEffect(() => { localStorage.setItem("birlal_products", JSON.stringify(products)); }, [products]);

function addToCart(productId, qty = 1) { setCart((prev) => { const current = prev[productId]?.qty || 0; return { ...prev, [productId]: { id: productId, qty: current + qty } }; }); }

function removeFromCart(productId) { setCart((prev) => { const copy = { ...prev }; delete copy[productId]; return copy; }); }

function updateQty(productId, qty) { if (qty <= 0) { removeFromCart(productId); return; } setCart((prev) => ({ ...prev, [productId]: { id: productId, qty } })); }

const categories = ["All", ...Array.from(new Set(products.map((p) => p.category)))];

const filtered = products.filter((p) => { const matchQuery = p.title.toLowerCase().includes(query.toLowerCase()) || p.description.toLowerCase().includes(query.toLowerCase()); const matchCat = category === "All" || p.category === category; return matchQuery && matchCat; });

const cartItems = Object.values(cart).map((c) => { const prod = products.find((p) => p.id === c.id); return { ...prod, qty: c.qty }; });

const subtotal = cartItems.reduce((s, it) => s + it.price * it.qty, 0); const shipping = subtotal > 1500 || subtotal === 0 ? 0 : 100; // free over a threshold const total = subtotal + shipping;

function handlePlaceOrder(customer) { // mock placing order: in real app send to backend const order = { id: ORD-${Date.now()}, customer, items: cartItems, subtotal, shipping, total, date: new Date().toISOString(), }; setOrderPlaced(order); setCart({}); setShowCheckout(false); // Optionally save orders to localStorage (demo only) const prevOrders = JSON.parse(localStorage.getItem("birlal_orders") || "[]"); localStorage.setItem("birlal_orders", JSON.stringify([order, ...prevOrders])); }

// Admin demo: add a product (client-side only) function adminAddProduct() { const newProd = { id: p${Date.now()}, title: New Product ${Date.now()}, price: 99, category: "Misc", image: "https://via.placeholder.com/320x240?text=New+Product", description: "Admin-added product (demo).", stock: 10, }; setProducts((s) => [newProd, ...s]); }

return ( <div className="min-h-screen bg-gray-50 text-gray-900"> <header className="bg-white shadow-sm"> <div className="max-w-6xl mx-auto px-4 py-4 flex items-center justify-between"> <div className="flex items-center gap-3"> <div className="rounded-full bg-indigo-600 text-white w-10 h-10 flex items-center justify-center font-bold">B</div> <div> <h1 className="text-xl font-semibold">Birlal General Store</h1> <p className="text-xs text-gray-500">Local goods — trusted since today</p> </div> </div>

<div className="flex items-center gap-4">
        <input
          aria-label="Search products"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          className="border rounded-md px-3 py-2 text-sm w-56"
          placeholder="Search products..."
        />

        <div className="relative">
          <button
            onClick={() => setShowCheckout((s) => !s)}
            className="flex items-center gap-2 border rounded-md px-3 py-2 text-sm bg-white"
          >
            Cart ({cartItems.reduce((a, b) => a + b.qty, 0)})
          </button>
        </div>

        <button
          onClick={adminAddProduct}
          className="text-sm bg-indigo-600 text-white px-3 py-2 rounded-md"
        >
          Admin Add
        </button>
      </div>
    </div>
  </header>

  <main className="max-w-6xl mx-auto px-4 py-6 grid grid-cols-1 lg:grid-cols-4 gap-6">
    <aside className="lg:col-span-1 bg-white p-4 rounded-lg shadow-sm">
      <h2 className="font-semibold">Categories</h2>
      <div className="mt-3 flex flex-wrap gap-2">
        {categories.map((c) => (
          <button
            key={c}
            onClick={() => setCategory(c)}
            className={`px-3 py-1 rounded-full text-sm ${category === c ? "bg-indigo-600 text-white" : "bg-gray-100"}`}
          >
            {c}
          </button>
        ))}
      </div>

      <div className="mt-6">
        <h3 className="font-medium">Quick Filters</h3>
        <div className="mt-2 text-sm text-gray-600">Free shipping over NPR 1500</div>
      </div>

      <div className="mt-6">
        <h3 className="font-medium">About</h3>
        <p className="text-sm text-gray-600 mt-2">Birlal General Store — demo e-commerce site for hosting practice and learning.</p>
      </div>
    </aside>

    <section className="lg:col-span-3">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {filtered.map((p) => (
          <article key={p.id} className="bg-white rounded-lg shadow-sm overflow-hidden">
            <img src={p.image} alt={p.title} className="w-full h-44 object-cover" />
            <div className="p-4">
              <div className="flex items-start justify-between">
                <div>
                  <h3 className="font-semibold">{p.title}</h3>
                  <div className="text-xs text-gray-500">{p.category}</div>
                </div>
                <div className="text-indigo-600 font-semibold">{formatPrice(p.price)}</div>
              </div>

              <p className="mt-2 text-sm text-gray-600 line-clamp-3">{p.description}</p>

              <div className="mt-4 flex items-center justify-between">
                <div className="text-xs text-gray-500">Stock: {p.stock}</div>
                <div className="flex items-center gap-2">
                  <button
                    onClick={() => setSelectedProduct(p)}
                    className="text-sm px-3 py-1 border rounded-md"
                  >
                    Details
                  </button>
                  <button
                    onClick={() => addToCart(p.id, 1)}
                    className="text-sm px-3 py-1 bg-indigo-600 text-white rounded-md"
                  >
                    Add
                  </button>
                </div>
              </div>
            </div>
          </article>
        ))}
      </div>
    </section>

    {/* Checkout drawer/modal */}
    {showCheckout && (
      <div className="fixed right-4 top-20 w-96 bg-white border rounded-lg shadow-xl p-4 z-50">
        <h3 className="font-semibold">Cart</h3>
        <div className="mt-3 space-y-3 max-h-72 overflow-auto">
          {cartItems.length === 0 && <div className="text-sm text-gray-500">Your cart is empty.</div>}
          {cartItems.map((it) => (
            <div key={it.id} className="flex items-center gap-3">
              <img src={it.image} alt="" className="w-12 h-12 object-cover rounded" />
              <div className="flex-1">
                <div className="text-sm font-medium">{it.title}</div>
                <div className="text-xs text-gray-500">{formatPrice(it.price)} x {it.qty}</div>
                <div className="mt-1 flex items-center gap-2">
                  <button onClick={() => updateQty(it.id, it.qty - 1)} className="px-2 py-1 border rounded">-</button>
                  <span className="text-sm">{it.qty}</span>
                  <button onClick={() => updateQty(it.id, it.qty + 1)} className="px-2 py-1 border rounded">+</button>
                </div>
              </div>
              <div>
                <button onClick={() => removeFromCart(it.id)} className="text-xs text-red-500">Remove</button>
              </div>
            </div>
          ))}
        </div>

        <div className="mt-3 border-t pt-3">
          <div className="flex justify-between text-sm"><span>Subtotal</span><span>{formatPrice(subtotal)}</span></div>
          <div className="flex justify-between text-sm"><span>Shipping</span><span>{formatPrice(shipping)}</span></div>
          <div className="flex justify-between font-semibold mt-2"><span>Total</span><span>{formatPrice(total)}</span></div>

          <div className="mt-3 flex gap-2">
            <button onClick={() => setShowCheckout(false)} className="flex-1 border rounded-md px-3 py-2">Continue shopping</button>
            <button onClick={() => { setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); setOrderPlaced(null); setShowCheckout(false); }} className="hidden">bugfix</button>
            <button onClick={() => { setShowCheckout(false); setOrderPlaced(null); setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); }} className="hidden">bugfix2</button>
            <button
              onClick={() => { setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); setShowCheckout(false); }}
              className="hidden"
            >
            </button>
            <button
              onClick={() => setShowCheckout(false) || setShowCheckout(true)}
              className="px-3 py-2 bg-green-600 text-white rounded-md"
              onDoubleClick={() => setShowCheckout(false)}
            >
              Checkout
            </button>
          </div>
        </div>
      </div>
    )}

    {/* Product modal */}
    {selectedProduct && (
      <div className="fixed inset-0 bg-black/40 z-40 flex items-center justify-center">
        <div className="bg-white rounded-lg max-w-2xl w-full p-4">
          <div className="flex items-start justify-between">
            <h3 className="font-semibold">{selectedProduct.title}</h3>
            <button onClick={() => setSelectedProduct(null)} className="text-gray-500">Close</button>
          </div>
          <div className="mt-3 grid grid-cols-1 md:grid-cols-3 gap-4">
            <img src={selectedProduct.image} alt="" className="w-full h-48 object-cover md:col-span-1 rounded" />
            <div className="md:col-span-2">
              <div className="text-indigo-600 font-semibold">{formatPrice(selectedProduct.price)}</div>
              <p className="mt-2 text-sm text-gray-600">{selectedProduct.description}</p>
              <div className="mt-4 flex items-center gap-2">
                <button onClick={() => addToCart(selectedProduct.id, 1)} className="px-3 py-2 bg-indigo-600 text-white rounded-md">Add to cart</button>
                <button onClick={() => setSelectedProduct(null)} className="px-3 py-2 border rounded-md">Done</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    )}

    {/* Simple checkout page (modalless) */}
    {orderPlaced && (
      <div className="fixed inset-0 z-50 flex items-center justify-center">
        <div className="bg-white p-6 rounded shadow-lg max-w-lg w-full">
          <h3 className="font-semibold">Order placed</h3>
          <p className="text-sm text-gray-600 mt-2">Your order <strong>{orderPlaced.id}</strong> was placed on {new Date(orderPlaced.date).toLocaleString()}.</p>
          <div className="mt-4 text-sm">
            <div>Items:</div>
            <ul className="mt-2 list-disc list-inside">
              {orderPlaced.items.map((it) => (
                <li key={it.id}>{it.title} x {it.qty} — {formatPrice(it.price * it.qty)}</li>
              ))}
            </ul>
          </div>

          <div className="mt-4 flex justify-end">
            <button onClick={() => setOrderPlaced(null)} className="px-3 py-2 bg-indigo-600 text-white rounded">Close</button>
          </div>
        </div>
      </div>
    )}

  </main>

  <footer className="bg-white border-t mt-8">
    <div className="max-w-6xl mx-auto px-4 py-6 text-sm text-gray-600">© {new Date().getFullYear()} Birlal General Store — Demo. For production, connect a backend and payment processor.</div>
  </footer>
</div>

); }

/* README & Hosting notes (quick)

1. Quick demo (no Tailwind setup):

Create app with CRA

Install react and run

In index.css add a small amount of CSS or paste a Tailwind CDN link into public/index.html Example CDN (development only) - add inside <head> of public/index.html:

<script src="https://cdn.tailwindcss.com"></script>
Then run: npm start


2. Make it production-ready:

Move product data to a backend (Node/Express, Firebase, Supabase)

Add authentication (Firebase Auth or Auth0)

Use Stripe for payments (create backend endpoints for creating PaymentIntents)

Use images hosted on a CDN (Cloudinary, Firebase Storage)



3. Deploying:

Vercel or Netlify: connect GitHub repo, push main branch, deploy automatically.

GitHub Pages: build and push to gh-pages branch.



4. Example: Connect Firebase (optional quick steps):

Create Firebase project, enable Firestore and Authentication

Use firestore to store products and orders

Create cloud function or server to create Stripe PaymentIntent (do not put secret keys in frontend)



5. Legal & Payments:

Follow PCI rules when handling card data. Use Stripe Checkout or PaymentIntents with a secure backend.




If you'd like, I can:

Convert this into a multi-file React repo scaffold (App + components + styles) ready for GitHub.

Add Stripe Checkout integration example with backend code (Express + Stripe).

Create a Netlify/Vercel deploy guide with environment variables for API keys.


*/

